vimcomplete.txt*		Autocompletion Plugin for Vim

Author: Girish Palya (girishji AT gmail DOT com)
For Vim version 9.0 and above

==============================================================================
CONTENTS                                            *vimcomplete-contents*

     1. Overview ................................. |vimcomplete-overview|
     2. Features ................................. |vimcomplete-features|
     3. Requirements ............................. |vimcomplete-requirements|
     4. Installation ............................. |vimcomplete-installation|
     5. Configuration ............................ |vimcomplete-configuration|
     6. Enable and Disable ....................... |vimcomplete-enable|
     7. List Completion Sources .................. |vimcomplete-list|
     8. Extensions ............................... |vimcomplete-extensions|

==============================================================================
1. Overview					*vimcomplete-overview*

A lightweight async autocompletion plugin written entirely in Vim9script.

==============================================================================
2. Features					*vimcomplete-features*

- Code completion using LSP (https://github.com/yegappan/lsp)
  (https://github.com/girishji/lsp-complete.vim)
- Snippet completion using |vsnip| (https://github.com/hrsh7th/vim-vsnip)
  (https://github.com/girishji/vsnip-complete.vim)
- Buffer word completion
- Vim's omnifunc language completion
  (https://github.com/girishji/omnifunc-complete.vim)
- Dictionary completion
- Dictionary (and next-word) completion using ngrams (|ngram.txt|)
  (https://github.com/girishji/ngram-complete.vim)
- Vimscript language completion (|vimscript-complete.txt|)
  (https://github.com/girishji/vimscript-complete.vim)
- Path completion
- Abbreviation completion

Each of the above completion options can be configured for specific file
types.

In addition, completion items can be sorted based on:

- Recency
- Length of item
- Priority
- Locality of item (for buffer completion)
- Case match

For cmdline-mode completion (`/`, `?`, and `:`) see |autosuggest.txt| plugin
(https://github.com/girishji/autosuggest.vim).

==============================================================================
3. Requirements					*vimcomplete-requirements*

- Vim >= 9.0

==============================================================================
4. Installation					*vimcomplete-installation*

Install using vim-plug (https://github.com/junegunn/vim-plug).
>
	vim9script
	plug#begin()
	Plug 'girishji/vimcomplete.vim'
	plug#end()

Alternately,
>
	call plug#begin()
	Plug 'girishji/vimcomplete.vim'
	call plug#end()

Or use Vim's builtin package manager.
>
	$ mkdir -p $HOME/.vim/pack/downloads/opt
	$ cd $HOME/.vim/pack/downloads/opt
	$ git clone https://github.com/girishji/vimcomplete.git

If using builtin package manager, add the following line to your $HOME/.vimrc
file:
>
	packadd vimcomplete

==============================================================================
5. Configuration				*vimcomplete-configuration*

Autocompletion items are sourced from various provider 'modules'. Some modules
are internal (builtin) while others are kept external for ease of maintenance.
The external modules have to be installed separately. Following modules are
built-in: 'lsp', 'buffer', 'dictionary', 'path', and 'abbrev'. 'lsp'
module needs LSP client (https://github.com/yegappan/lsp).

Following modules are external to this plugin. See the links below for
installation and configuration instructions.

- LSP based code completion 
  (https://github.com/girishji/lsp-complete.vim)
- Vim's omnifunc based code completion
  (https://github.com/girishji/omnifunc-complete.vim)
- Dictionary and next-word completion using 'ngram'
  (https://github.com/girishji/ngram-complete.vim)
- 'vimscript' language completion
  (https://github.com/girishji/vimscript-complete.vim) (like LSP)
- vsnip snippet completion (https://github.com/girishji/vsnip-complete.vim)

Both completion 'engine' and completion 'modules' are configurable. Completion
modules are *not* enabled (activated) by default except for 'buffer' word
completion and 'path' completion modules.

Completion Engine Options~

						    *vimcomplete-sortByLength*
sortByLength 		|Boolean| option. Sort completion items based on
 			length of autocompletion text. Default is |false|.

							 *vimcomplete-recency*
recency 		||Boolean| option. Show most recently chosen items at
			the top. Default is |true|.

						 *vimcomplete-recentItemCount*
recentItemCount 	|Number| option. Number of recent items to show at the
			top. Default is |5|.

						       *vimcomplete-matchCase*
matchCase 		|Boolean| option. Some provider modules return items
			that may not match the case of prefix being completed.
			Show items that match case with prefix at the top
			followed by other items. Default is |true|.

							*vimcomplete-kindName*
kindName 		|Boolean| option. Show the kind of completion as a
			full word (verbose) instead of a single letter. For
			example, show `[snippet]` instead of `S`. Default is
			|true|.

					    *vimcomplete-shuffleEqualPriority*
shuffleEqualPriority 	|Boolean| option. Items of equal priority modules are
			arranged such that the first item of all modules
			appear at the top. Default is set to |false|.

					   *vimcomplete-noNewlineInCompletion*
noNewlineInCompletion 	|Boolean| option. |<Enter>| key in insert mode stops
			completion and inserts an |<Enter>|. Default is set to
			|false|.

							*vimcomplete-alwaysOn*
alwaysOn 		|Boolean| option. If |false| use `<c-space>`
			(control-space) to trigger completion. Default is
			|true|.

Completion Provider Module General Options~

Following options are common to all completion provider modules.

						   *vimcomplete-module-enable*
enable 			|Boolean| option. |true| to enable the module. Default
			is |false| for all builtin modules except 'buffer'
			and 'path' completion.

						 *vimcomplete-module-maxCount*
maxCount 		|Number| option. Number of completion items made
			available from the module. Default is `10`.

						 *vimcomplete-module-priority*
priority 		|Number| option. Higher priority items are shown at
			the top. Default is `10`.

						*vimcomplete-module-filetypes*
filetypes 		|List|  List of file-types to enable a particular
			provider module. Default is `['*']` (all file-types),
			except for 'dictionary' module which is set to
			['text', 'markdown'].

Buffer Module Options~

In addition to above general options Buffer completion module has its own options.

						  *vimcomplete-buffer-timeout*
timeout 		|Number| option. Maximum time spent searching for
			completion candidates in current buffer. Default is
			`100` milliseconds. If searching in multiple buffers
			additional 100 milliseconds is allocated. Search
			is aborted if any key is pressed.

				       *vimcomplete-buffer-searchOtherBuffers*
searchOtherBuffers 	|Boolean| option. Search other listed buffers. Default
			is |true|

					*vimcomplete-buffer-otherBuffersCount*
otherBuffersCount 	|Number| option. Maximum number of other listed
			buffers to search. Default is `3`.

						    *vimcomplete-buffer-icase*
icase 			|Boolean| option. Ignore case when searching for
			completion candidates. Default is |true|.

					      *vimcomplete-buffer-urlComplete*
urlComplete 		|Boolean| option. Complete http links in entirety.
			Useful when typing same url multiple times. Default is
			|false|.

					      *vimcomplete-buffer-envComplete*
envComplete 		|Boolean| option. Complete environment variables after
			letter `$`. Default is |false|.

Path Module Options~

In addition to above general options Path completion module has its own options.

bufferRelativePath 	|Boolean| option. Interpret relative paths as being
			relative to the directory of the current buffer. By
			default, paths are interpreted as relative to the
			current working directory (see |:pwd|). Default is
			|true|.

Note: Path completion kicks in when there is a `/` (`\` for Windows) or `.` in
the word before cursor. To autocomplete deeper in a directory type `/` at the
end.

Configure Options~

Options are configured using global function `g:VimCompleteOptionsSet()`. Here
is an example of how you can enable and configure completion modules. Not all
options are shown here, please see tables above for all available options.
>
	vim9script
	export var options = {
	    completor: { shuffleEqualPriority: true },
	    buffer: { enable: true, priority: 10, urlComplete: true, envComplete: true },
	    abbrev: { enable: true, priority: 10 },
	    dictionary: { enable: true, priority: 6, icase: false, filetypes: ['c', 'cpp'] },
	    lsp: { enable: true, priority: 12, maxCount: 5 },
	    omnifunc: { enable: false, priority: 8, filetypes: ['python', 'javascript'] },
	    vsnip: { enable: true, priority: 11 },
	    vimscript: { enable: true, priority: 11 },
	    ngram: {
	        enable: true,
	        priority: 10,
	        bigram: false,
	        filetypes: ['text', 'help', 'markdown'],
	        filetypesComments: ['c', 'cpp', 'python'],
	    },
	}
	autocmd VimEnter * g:VimCompleteOptionsSet(options)

Tab Completion~

`<Tab>` and `<S-Tab>` keys can be mapped to select autocompletion items. By
default `<C-N>` and `<C-P>` select the menu items.
>
	g:vimcomplete_tab_enable = 1

==============================================================================
6. Enable and Disable 		*vimcomplete_disable* *vimcomplete-enable*

Autocompletion is enabled by default. You can enable or disable the plugin
anytime using commands.
>
	:VimCompleteEnable
	:VimCompleteDisable

You can selectively enable autocompletion for specified file types. For
example, enable autocompletion for `c`, `cpp`, `python`, `vim`, `text`, and
`markdown` files.

>
	:VimCompleteEnable c cpp python vim text markdown

`VimCompleteEnable` takes space separated list of file types as an argument. If
no argument is specified, then autocompletion is enabled for all file types. 

If you are using a plugin manager like |vim-plug| use the following in
$HOME/.vimrc.

```
autocmd VimEnter * VimCompleteEnable c cpp python vim text markdown
```

When Vim is started without any arguments it opens an unnamed buffer. This
buffer is not associated with any _file type_. To enable/disable
autocompletion on this buffer use the following variable. It is set by default.

```
g:vimcomplete_noname_buf_enable = true
```

==============================================================================
7. List Completion Sources 				*vimcomplete-list*

Following command shows which completion modules are active for a current
buffer,
>
	:VimCompleteCompletors

==============================================================================
8. Extensions					*vimcomplete-extensions*

A good place to start is by looking at the implementation of external
plugins, like
- Vimscript completion (https://github.com/girishji/vimscript-complete.vim)
- ngrams (https://github.com/girishji/ngram-complete.vim)
- ngrams-viewer (https://github.com/girishji/ngramview-complete.vim)

The Completion engine uses similar interface as Vim's |complete-functions|
except that the function is called in three different ways (instead of two):

- First the function is called to find the start of the text to be completed.
- Next the function is called to check if completion candidates are available.
- Later the function is called to actually find the matches.

The first and last invocation are identical to Vim's |complete-functions|. On
the second invocation the arguments are:

- findstart: 2
- base:	empty

The function must return |true| or |false| indicating whether completion
candidates are ready. Only when this return value is |true| will the function
invoked for the third time to get the actual matches. This step is necessary
for asynchronous completion.

It does not matter what the name of the completion function is but it
should take two arguments `findstart: Number` and `base: String` and return
`<any>`. This function should be registered with completion engine by calling
`vimcompletor.Register()` function. The `User` event of type
`VimCompleteLoaded` can be used to time the registration.

When the user sets options through Vim configuration file a `User` event with
type `VimCompleteOptionsChanged` is issued. The plugin should register for
this event and update its internal state appropriately.

==============================================================================

vim:tw=78:ts=8:noet:ft=help:norl:
